name: Go

on:
  push:
    branches:
      - main
      - develop
      - release/*
      - hotfix/*
      - feat/*
      - feature/*
      - ci/*

  pull_request:
    paths:
      - "cmd/**"
      - "devshell/**"
      - "internal/**"
      - "pkg/**"

jobs:
  golangci-linter:
    permissions:
      contents: read # for actions/checkout to fetch code
      pull-requests: read # for golangci/golangci-lint-action to fetch pull requests
    name: Run Go Linter
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-go@v4
        with:
          go-version: "~1.20"
          check-latest: true

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.53
          args: --timeout 10m
          # Optional: show only new issues if it's a pull request. The default value is `false`.
          # only-new-issues: true

  cross-build:
    name: Build
    strategy:
      fail-fast: false
      matrix:
        goos: ["linux", "windows", "darwin"]
        go: ["1.20"]
        include:
          # Set the minimum Go patch version for the given Go minor
          # Usable via ${{ matrix.GO_SEMVER }}
          - go: "1.20"
            GO_SEMVER: "~1.20.1"

    runs-on: ubuntu-latest
    needs:
      - golangci-linter
    continue-on-error: true
    steps:
      - uses: actions/checkout@v3

      - name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.GO_SEMVER }}
          check-latest: true

      - name: Print Go version and environment
        id: vars
        run: |
          printf "Using go at: $(which go)\n"
          printf "Go version: $(go version)\n"
          printf "\n\nGo environment:\n\n"
          go env
          printf "\n\nSystem environment:\n\n"
          env

      - name: Build
        env:
          CGO_ENABLED: 0
          GOOS: ${{ matrix.goos }}
        shell: bash
        continue-on-error: true
        working-directory: ./cmd/fixa
        run: |
          GOOS=$GOOS go build -trimpath -o fixa-"$GOOS"-amd64 2> /dev/null
          if [ $? -ne 0 ]; then
            echo "::warning ::$GOOS Build Failed"
            exit 0
          fi
